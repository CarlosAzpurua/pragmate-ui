@mixin get-colors($prefix, $color, $level) {
	$palette: ();

	@if $level < 50 or $level > 900 or $level % 100 != 0 {
		@warn "Invalid level. Please choose from 50, 100, ..., 900.";
	}

	$increment: $level / 500 - 1;

	@for $i from 1 through 9 {
		$tone-number: $i * 100;
		$color-tone: adjust-hue($color, $increment * ($level - $tone-number));
		$palette: map-merge(
			$palette,
			(
				$tone-number: $color-tone,
			)
		);
	}

	@each $tone, $value in $palette {
		$variable-name: '--#{$prefix}-#{$tone}';
		#{$variable-name}: #{$value};
	}

	$lighten-variable-name: '--#{$prefix}-light';
	#{$lighten-variable-name}: map-get($palette, $level - 100);

	$darken-variable-name: '--#{$prefix}-dark';
	#{$darken-variable-name}: map-get($palette, $level + 100);
}

@function luminance($color) {
	$red: red($color) / 255;
	$green: green($color) / 255;
	$blue: blue($color) / 255;
	$luminance: 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
	@return $luminance;
}
@function get-tone($color) {
	// Tono base
	$base: #6200ee;

	// Obtener diferencia de luminosidad
	$diff: luminance($base) - luminance($color);

	// Calcular tono basado en diferencia and rounding to the nearest multiple of 100
	$roundedTone: round(abs($diff) * 10) / 10 * 100;

	@if $diff > 0 {
		@return $roundedTone + 100; // Más claro que base
	} @else {
		@return 500 - $roundedTone; // Más oscuro que base
	}
}

// Uso:
